{"title":"JavaScript-高级","uid":"5e2ed994fcc6085bef4fc36a901c80bc","slug":"JavaScript-senior","date":"2022-03-29T04:47:23.000Z","updated":"2022-03-29T05:13:46.743Z","comments":true,"path":"api/articles/JavaScript-senior.json","keywords":null,"cover":null,"content":"<h1 id=\"JS高级\"><a href=\"#JS高级\" class=\"headerlink\" title=\"JS高级\"></a>JS高级</h1><h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p>面向对象语言中<code>this</code>表示当前对象的一个引用。</p>\n<p>但在<code>JavaScript</code>中<code>this</code>不是固定不变的，它会随着执行环境的改变而改变。</p>\n<h3 id=\"在方法中，this表示该方法所属的对象\"><a href=\"#在方法中，this表示该方法所属的对象\" class=\"headerlink\" title=\"在方法中，this表示该方法所属的对象\"></a>在方法中，<code>this</code>表示该方法所属的对象</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ma\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"QiLin\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function-variable function\">getNameFn</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span> firstName <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>在对象方法中，<code>this</code>指向调用它所在方法的对象。</li>\n<li>在上面一个实例中，<code>this</code>表示<code>obj</code>对象。</li>\n<li><code>fullName</code>方法所属的对象就是<code>obj</code>。</li>\n</ul>\n<h3 id=\"如果单独使用this表示全局对象\"><a href=\"#如果单独使用this表示全局对象\" class=\"headerlink\" title=\"如果单独使用this表示全局对象\"></a>如果单独使用<code>this</code>表示全局对象</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>单独使用<code>this</code>，则它指向全局<code>Global</code>对象。</li>\n<li>在浏览器中，<code>window</code> 就是该全局对象为<code> [object Window]:</code></li>\n<li>严格模式下，如果单独使用，<code>this</code> 也是指向全局<code>Global</code>对象。</li>\n</ul>\n<h3 id=\"在函数中，this表示全局对象，严格模式下为undefined\"><a href=\"#在函数中，this表示全局对象，严格模式下为undefined\" class=\"headerlink\" title=\"在函数中，this表示全局对象，严格模式下为undefined\"></a>在函数中，<code>this</code>表示全局对象，严格模式下为<code>undefined</code></h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>在函数中，函数的所属者默认绑定到 <code>this</code> 上。</li>\n<li>在浏览器中，<code>window</code> 就是该全局对象为 <code>[object Window]</code>:</li>\n<li>严格模式下函数是没有绑定到 <code>this</code> 上，这时候 <code>this</code> 是 <code>undefined</code>。</li>\n</ul>\n<h3 id=\"在事件中，this表示接收事件的元素\"><a href=\"#在事件中，this表示接收事件的元素\" class=\"headerlink\" title=\"在事件中，this表示接收事件的元素\"></a>在事件中，<code>this</code>表示接收事件的元素</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>button onclick<span class=\"token operator\">=</span><span class=\"token string\">\"this.style.display='none'\"</span><span class=\"token operator\">></span>\n\t点我后我就消失了\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>在 <code>HTML</code> 事件句柄中，<code>this</code> 指向了接收事件的 <code>HTML</code> 元素：</li>\n</ul>\n<h3 id=\"类似-call-和-apply-方法可以将-this-引用到任何对象（更改this指向）\"><a href=\"#类似-call-和-apply-方法可以将-this-引用到任何对象（更改this指向）\" class=\"headerlink\" title=\"类似 call() 和 apply() 方法可以将 this 引用到任何对象（更改this指向）\"></a>类似 <code>call()</code> 和 <code>apply()</code> 方法可以将 <code>this</code> 引用到任何对象（更改<code>this</code>指向）</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> person1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function-variable function\">fullName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> person2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">fullName</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回 \"John Doe\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>在 <code>JavaScript</code> 中函数也是对象，对象则有方法，<code>apply</code> 和 <code>call</code> 就是函数对象的方法。这两个方法异常强大，他们允许切换函数执行的上下文环境<code>context</code>，即 <code>this</code> 绑定的对象。</p>\n</li>\n<li><p>在上面面实例中，当我们使用 <code>person2</code> 作为参数来调用 <code>person1.fullName</code> 方法时, <code>this</code> 将指向 <code>person2</code>, 即便它是 <code>person1</code> 的方法：</p>\n</li>\n</ul>\n<h3 id=\"在构造函数中this表示实例\"><a href=\"#在构造函数中this表示实例\" class=\"headerlink\" title=\"在构造函数中this表示实例\"></a>在构造函数中<code>this</code>表示实例</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token keyword\">const</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mql'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'mql', age: 18 &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h2 id=\"原型、原型链\"><a href=\"#原型、原型链\" class=\"headerlink\" title=\"原型、原型链\"></a>原型、原型链</h2><p>JS在设计时并没有采用其他语言的<code>class</code>概念，而采用的时原型继承的设计模式。可以粗略理解问，原型 + 构造函数 + 原型链 形成的继承模式为 JAVA中的类<code>class</code>模式</p>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><h3 id=\"什么是构造函数\"><a href=\"#什么是构造函数\" class=\"headerlink\" title=\"什么是构造函数\"></a>什么是构造函数</h3><p>在 <code>JavaScript</code> 中，用 <code>new</code> 关键字来调用的函数，称为构造函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'card'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\t\n<span class=\"token keyword\">const</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'card' &#125;;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"为什么实用构造函数\"><a href=\"#为什么实用构造函数\" class=\"headerlink\" title=\"为什么实用构造函数\"></a>为什么实用构造函数</h3><p>比如：现有一个造车工厂，每个车都有一些配置参数，代码如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">card1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"红色\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'奔驰'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token string\">'40w'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\t\ncard2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'白色'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'奔驰'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token string\">'60w'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从数据中可以看出，每辆车有很多属性，有相同的，有独立不同的。如果汽车多了，我们就会写很多类似的代码。构造函数工厂模式就是解决这一难题。代码如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">card</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color<span class=\"token punctuation\">,</span> price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'奔驰'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\t\n<span class=\"token keyword\">const</span> card1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">card</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'红色'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400000</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// &#123; color: '红色', name: '奔驰', price: '4000000' &#125;</span>\n<span class=\"token keyword\">const</span> card2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">card</span><span class=\"token punctuation\">(</span><span class=\"token string\">'白色'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"构造函数执行过程及原理\"><a href=\"#构造函数执行过程及原理\" class=\"headerlink\" title=\"构造函数执行过程及原理\"></a>构造函数执行过程及原理</h3><ul>\n<li>当<code>card1</code>用<code>new</code>关键字调用<code>card</code>方法时，会为<code>card1</code>开辟一个新内存，且<code>card</code>中的<code>this</code>指向该内存即<code>card1</code>.代码如下</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> card1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">card</span><span class=\"token punctuation\">(</span><span class=\"token string\">'白色'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 开辟一个新的内存空间card1 并且card的this指向该空间</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"构造函数返回值\"><a href=\"#构造函数返回值\" class=\"headerlink\" title=\"构造函数返回值\"></a>构造函数返回值</h3><p>由于函数体内部的 <code>this</code> 指向新创建的内存空间，默认返回 <code>this</code> ，就相当于默认返回了该内存空间，也就是上图中的 <code>card1</code>。此时，<code>card1</code>的内存空间被变量 <code>card1</code> 所接受。也就是说 <code>card1</code> 这个变量，保存的内存地址就是 <code>card1</code>，同时被标记为 <code>card</code> 的实例。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>实例在调用构造函数时会开辟一个新的内存空间，前面提到过公共属性，例如<code>name</code>属性。如此便在内存空间都会有name属性，这无疑是很浪费内存的。这种情况可以采用原型+原型链的方法共享属性。无需单独创建。代码如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">function</span> <span class=\"token function\">card</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color<span class=\"token punctuation\">,</span> price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> pirce<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 通过在原型上添加公共属性`name` 让实例继承</span>\ncard<span class=\"token punctuation\">.</span> prototype<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'奔驰'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> card1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">card</span><span class=\"token punctuation\">(</span><span class=\"token string\">'红色'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123; color:'红色', price: 40000, name: '奔驰' &#125;\t\t</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"数据类型-gt-栈、堆\"><a href=\"#数据类型-gt-栈、堆\" class=\"headerlink\" title=\"数据类型 =&gt; 栈、堆\"></a>数据类型 =&gt; 栈、堆</h2><h2 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h2><h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><h2 id=\"执行机制、事件循环、事件队列\"><a href=\"#执行机制、事件循环、事件队列\" class=\"headerlink\" title=\"执行机制、事件循环、事件队列\"></a>执行机制、事件循环、事件队列</h2><h3 id=\"单线程\"><a href=\"#单线程\" class=\"headerlink\" title=\"单线程\"></a>单线程</h3><p>JavaScript是单线程语言、</p>\n","text":"JS高级this面向对象语言中this表示当前对象的一个引用。 但在JavaScript中this不是固定不变的，它会随着执行环境的改变而改变。 在方法中，this表示该方法所属的对象var obj = &#123; firstName: \"Ma\", lastName: \"QiL...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"code","slug":"code","count":3,"path":"api/tags/code.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JS%E9%AB%98%E7%BA%A7\"><span class=\"toc-text\">JS高级</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#this\"><span class=\"toc-text\">this</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E6%96%B9%E6%B3%95%E4%B8%AD%EF%BC%8Cthis%E8%A1%A8%E7%A4%BA%E8%AF%A5%E6%96%B9%E6%B3%95%E6%89%80%E5%B1%9E%E7%9A%84%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">在方法中，this表示该方法所属的对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E6%9E%9C%E5%8D%95%E7%8B%AC%E4%BD%BF%E7%94%A8this%E8%A1%A8%E7%A4%BA%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">如果单独使用this表示全局对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E5%87%BD%E6%95%B0%E4%B8%AD%EF%BC%8Cthis%E8%A1%A8%E7%A4%BA%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1%EF%BC%8C%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E4%B8%8B%E4%B8%BAundefined\"><span class=\"toc-text\">在函数中，this表示全局对象，严格模式下为undefined</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E4%BA%8B%E4%BB%B6%E4%B8%AD%EF%BC%8Cthis%E8%A1%A8%E7%A4%BA%E6%8E%A5%E6%94%B6%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">在事件中，this表示接收事件的元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E4%BC%BC-call-%E5%92%8C-apply-%E6%96%B9%E6%B3%95%E5%8F%AF%E4%BB%A5%E5%B0%86-this-%E5%BC%95%E7%94%A8%E5%88%B0%E4%BB%BB%E4%BD%95%E5%AF%B9%E8%B1%A1%EF%BC%88%E6%9B%B4%E6%94%B9this%E6%8C%87%E5%90%91%EF%BC%89\"><span class=\"toc-text\">类似 call() 和 apply() 方法可以将 this 引用到任何对象（更改this指向）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%ADthis%E8%A1%A8%E7%A4%BA%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">在构造函数中this表示实例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">闭包</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE\"><span class=\"toc-text\">原型、原型链</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">构造函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">什么是构造函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AE%9E%E7%94%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">为什么实用构造函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%8F%8A%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">构造函数执行过程及原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">构造函数返回值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">缺点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-gt-%E6%A0%88%E3%80%81%E5%A0%86\"><span class=\"toc-text\">数据类型 &#x3D;&gt; 栈、堆</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">回调函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5\"><span class=\"toc-text\">异步</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6%E3%80%81%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E3%80%81%E4%BA%8B%E4%BB%B6%E9%98%9F%E5%88%97\"><span class=\"toc-text\">执行机制、事件循环、事件队列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">单线程</span></a></li></ol></li></ol></li></ol>","author":{"name":"马麒麟","slug":"blog-author","avatar":"https://test-1257728582.cos.ap-chengdu.myqcloud.com/avter/IMG_3605.jpeg","link":"/","description":"习惯养成计划","socials":{"github":"https://github.com/mql870","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com","zhihu":"https://www.zhihu.com","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaScript-初级","uid":"3cdc3782366cef9b905f84f886ca8afa","slug":"JavaScript-primary","date":"2022-03-29T05:05:22.000Z","updated":"2022-03-29T10:28:11.707Z","comments":true,"path":"api/articles/JavaScript-primary.json","keywords":null,"cover":null,"text":"JavaScript初级内置数据类型基本数据类型 undefined Null Boolean String Number Symbol（ES6） BigInt（ES6) 基础类型存储在栈内存，被引用或拷贝时，会创建一个完全相等的变量；占据空间小、大小固定，属于被频繁使用数据，所...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"code","slug":"code","count":3,"path":"api/tags/code.json"}],"author":{"name":"马麒麟","slug":"blog-author","avatar":"https://test-1257728582.cos.ap-chengdu.myqcloud.com/avter/IMG_3605.jpeg","link":"/","description":"习惯养成计划","socials":{"github":"https://github.com/mql870","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com","zhihu":"https://www.zhihu.com","csdn":"","juejin":"","customs":{}}}},"next_post":{}}