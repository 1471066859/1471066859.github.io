{"title":"JavaScript-初级","uid":"3cdc3782366cef9b905f84f886ca8afa","slug":"JavaScript-primary","date":"2022-03-29T05:05:22.000Z","updated":"2022-03-29T10:28:11.707Z","comments":true,"path":"api/articles/JavaScript-primary.json","keywords":null,"cover":null,"content":"<h1 id=\"JavaScript初级\"><a href=\"#JavaScript初级\" class=\"headerlink\" title=\"JavaScript初级\"></a>JavaScript初级</h1><h2 id=\"内置数据类型\"><a href=\"#内置数据类型\" class=\"headerlink\" title=\"内置数据类型\"></a>内置数据类型</h2><h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><ol>\n<li>undefined</li>\n<li>Null</li>\n<li>Boolean</li>\n<li>String</li>\n<li>Number</li>\n<li>Symbol（ES6）</li>\n<li>BigInt（ES6)</li>\n</ol>\n<p>基础类型存储在栈内存，被引用或拷贝时，会创建一个完全相等的变量；占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储。</p>\n<h3 id=\"引用数据类型（Object）\"><a href=\"#引用数据类型（Object）\" class=\"headerlink\" title=\"引用数据类型（Object）\"></a>引用数据类型（<code>Object</code>）</h3><ol>\n<li>Array</li>\n<li>RegExp</li>\n<li>Date</li>\n<li>Math</li>\n<li>Function</li>\n</ol>\n<p>种引用数据类型<strong>Object</strong>（Object本质上是由一组无序的名值对组成的）。里面包含 <strong>function</strong>、<strong>Array</strong>、<strong>Date</strong>等。JavaScript不支持任何创建自定义类型的机制，而所有值最终都将是上述 8 种数据类型之一。引用数据类型: 对象<strong>Object</strong>（包含普通对象-<strong>Object</strong>，数组对象-<strong>Array</strong>，正则对象-<strong>RegExp</strong>，日期对象-<strong>Date</strong>，数学函数-<strong>Math</strong>，函数对象-<strong>Function</strong>）</p>\n<p>引用类型存储在堆内存，存储的是地址，多个引用指向同一个地址，这里会涉及一个“共享”的概念；占据空间大、大小不固定。引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</p>\n<h3 id=\"内存机制（JavaScript-中的数据是如何存储在内存中的）\"><a href=\"#内存机制（JavaScript-中的数据是如何存储在内存中的）\" class=\"headerlink\" title=\"内存机制（JavaScript 中的数据是如何存储在内存中的）\"></a>内存机制（JavaScript 中的数据是如何存储在内存中的）</h3><p>在 JavaScript 中，原始类型的赋值会完整复制变量值，而引用类型的赋值是复制引用地址。</p>\n<p>在 JavaScript 的执行过程中， 主要有三种类型内存空间，分别是<strong>代码空间</strong>、<strong>栈空间</strong>、<strong>堆空间</strong>。其中的代码空间主要是存储可执行代码的，原始类型(<strong>Number、String、Null、Undefined、Boolean、Symbol、BigInt</strong>)的数据值都是直接保存在“栈”中的，引用类型(Object)的值是存放在“堆”中的。因此在栈空间中(执行上下文)，原始类型存储的是变量的值，而引用类型存储的是其在”堆空间”中的地址，当 JavaScript 需要访问该数据的时候，是通过栈中的引用地址来访问的，相当于多了一道转手流程。</p>\n<p>在编译过程中，如果 JavaScript 引擎判断到一个闭包，也会在堆空间创建换一个“**closure(fn)**”的对象（这是一个内部对象，JavaScript 是无法访问的），用来保存闭包中的变量。所以闭包中的变量是存储在“堆空间”中的。</p>\n<p>JavaScript 引擎需要用栈来维护程序执行期间上下文的状态，如果栈空间大了话，所有的数据都存放在栈空间里面，那么会影响到上下文切换的效率，进而又影响到整个程序的执行效率。通常情况下，栈空间都不会设置太大，主要用来存放一些原始类型的小数据。而引用类型的数据占用的空间都比较大，所以这一类数据会被存放到堆中，堆空间很大，能存放很多大的数据，不过缺点是分配内存和回收内存都会占用一定的时间。因此需要“栈”和“堆”两种空间。</p>\n<h2 id=\"数据类型检测\"><a href=\"#数据类型检测\" class=\"headerlink\" title=\"数据类型检测\"></a>数据类型检测</h2><h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><p>typeof 对于原始类型来说，除了 null 都可以显示正确的类型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// number</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// boolean</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// string</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// object     []数组的数据类型在 typeof 中被解释为 object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// function</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// object     null 的数据类型被 typeof 解释为 object</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>typeof</strong> 对于对象来说，除了函数都会显示 <strong>object</strong>，所以说 <strong>typeof</strong> 并不能准确判断变量到底是什么类型,所以想判断一个对象的正确类型，这时候可以考虑使用 <strong>instanceof</strong></p>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p><strong>instanceof</strong> 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的 基本类型(null): 使用 String(null)<br>基本类型(string / number / boolean / undefined) + function: - 直接使用 typeof即可<br>其余引用类型(Array / Date / RegExp Error): 调用toString后根据[object XXX]进行判断</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// false </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// false  </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// true    </span>\n<span class=\"token comment\">// console.log(undefined instanceof Undefined);</span>\n<span class=\"token comment\">// console.log(null instanceof Null);</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<ul>\n<li><strong>instanceof</strong> 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型；</li>\n<li>而 <strong>typeof</strong> 也存在弊端，它虽然可以判断基础数据类型（<strong>null</strong> 除外），但是引用数据类型中，除了 <strong>function</strong> 类型以外，其他的也无法判断</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// 我们也可以试着实现一下 instanceof</span>\n<span class=\"token keyword\">function</span> <span class=\"token keyword\">instanceof</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// 获得类型的原型</span>\n<span class=\"token keyword\">let</span> prototype <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span>prototype\n<span class=\"token comment\">// 获得对象的原型</span>\nleft <span class=\"token operator\">=</span> left<span class=\"token punctuation\">.</span>__proto__\n<span class=\"token comment\">// 判断对象的类型是否等于类型的原型</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prototype <span class=\"token operator\">===</span> left<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\nleft <span class=\"token operator\">=</span> left<span class=\"token punctuation\">.</span>__proto__\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里有一个坑，如果我创建一个对象，更改它的原型，<strong>constructor</strong>就会变得不可靠了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Fn</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">var</span> f<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Object-prototype-toString-call\"><a href=\"#Object-prototype-toString-call\" class=\"headerlink\" title=\"Object.prototype.toString.call()\"></a>Object.prototype.toString.call()</h3><p> <strong>toString</strong>() 是 <strong>Object</strong> 的原型方法，调用该方法，可以统一返回格式为 “**[object Xxx]**” 的字符串，其中 <strong>Xxx</strong> 就是对象的类型。对于 <strong>Object</strong> 对象，直接调用 <strong>toString()</strong> 就能返回 **[object Object]**；而对于其他对象，则需要通过 <strong>call</strong> 来调用，才能返回正确的类型信息。我们来看一下代码。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// \"[object Object]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 同上结果，加上call也ok</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// \"[object Number]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"[object String]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"[object Boolean]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"[object Function]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//\"[object Null]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//\"[object Undefined]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">123</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//\"[object RegExp]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//\"[object Date]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">//\"[object Array]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//\"[object HTMLDocument]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//\"[object Window]\"</span>\n\n<span class=\"token comment\">// 从上面这段代码可以看出，Object.prototype.toString.call() 可以很好地判断引用类型，甚至可以把 document 和 window 都区分开来。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>实现一个全局通用的数据类型判断方法，来加深你的理解，代码如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">function</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> type  <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// 先进行typeof判断，如果是基础数据类型，直接返回</span>\n    <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 对于typeof返回结果是object的，再进行如下的判断，正则返回结果</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\[object (\\S+)\\]$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 注意正则中间\t有个空格</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/* 代码验证，需要注意大小写，哪些是typeof判断，哪些是toString判断？思考下 */</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// \"Array\" typeof []是object，因此toString返回</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"string\" typeof 直接返回</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"Window\" toString返回</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// \"Null\"首字母大写，typeof null是object，需toString来判断</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// \"undefined\" typeof 直接返回</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">// \"undefined\" typeof 直接返回</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"function\" typeof能判断，因此首字母小写</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">123</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">//\"RegExp\" toString返回</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><strong>typeof</strong><ul>\n<li>直接在计算机底层基于数据类型的值（二进制）进行检测</li>\n<li><strong>typeof</strong> <strong>null</strong>为<strong>object</strong> 原因是对象存在在计算机中，都是以<strong>000</strong>开始的二进制存储，所以检测出来的结果是对象</li>\n<li><strong>typeof</strong> 普通对象/数组对象/正则对象/日期对象 都是object</li>\n<li><strong>typeof NaN === ‘number’</strong></li>\n</ul>\n</li>\n<li><strong>instanceof</strong><ul>\n<li>检测当前实例是否属于这个类的</li>\n<li>底层机制：只要当前类出现在实例的原型上，结果都是true</li>\n<li>不能检测基本数据类型</li>\n</ul>\n</li>\n<li><strong>constructor</strong><ul>\n<li>支持基本类型</li>\n<li>constructor可以随便改，也不准</li>\n</ul>\n</li>\n<li><strong>Object.prototype.toString.call([val])</strong><ul>\n<li>返回当前实例所属类信息</li>\n</ul>\n</li>\n</ul>\n<p> 判断 <strong>Target</strong> 的类型，单单用 <strong>typeof</strong> 并无法完全满足，这其实并不是 <strong>bug</strong>，本质原因是 <strong>JS</strong> 的万物皆对象的理论。因此要真正完美判断时，我们需要区分对待:</p>\n<ul>\n<li>基本类型(<strong>null</strong>): 使用 <strong>String(null)</strong></li>\n<li>基本类型(<strong>string / number / boolean / undefined</strong>) + <strong>function</strong>: - 直接使用 <strong>typeof</strong>即可</li>\n<li>其余引用类型(<strong>Array / Date / RegExp Error</strong>): 调用toString后根据**[object XXX]**进行判断</li>\n</ul>\n","text":"JavaScript初级内置数据类型基本数据类型 undefined Null Boolean String Number Symbol（ES6） BigInt（ES6) 基础类型存储在栈内存，被引用或拷贝时，会创建一个完全相等的变量；占据空间小、大小固定，属于被频繁使用数据，所...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"code","slug":"code","count":3,"path":"api/tags/code.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JavaScript%E5%88%9D%E7%BA%A7\"><span class=\"toc-text\">JavaScript初级</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%AE%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">内置数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">基本数据类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%88Object%EF%BC%89\"><span class=\"toc-text\">引用数据类型（Object）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6%EF%BC%88JavaScript-%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E6%98%AF%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%EF%BC%89\"><span class=\"toc-text\">内存机制（JavaScript 中的数据是如何存储在内存中的）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">数据类型检测</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#typeof\"><span class=\"toc-text\">typeof</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#instanceof\"><span class=\"toc-text\">instanceof</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#constructor-NaN\"><span class=\"toc-text\">constructor</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Object-prototype-toString-call\"><span class=\"toc-text\">Object.prototype.toString.call()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li></ol></li></ol>","author":{"name":"马麒麟","slug":"blog-author","avatar":"https://test-1257728582.cos.ap-chengdu.myqcloud.com/avter/IMG_3605.jpeg","link":"/","description":"习惯养成计划","socials":{"github":"https://github.com/mql870","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com","zhihu":"https://www.zhihu.com","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"applet","uid":"035e9fb91b64df4276e3d6de8a3ceb28","slug":"applet","date":"2022-03-29T05:27:51.000Z","updated":"2022-03-29T09:54:55.181Z","comments":true,"path":"api/articles/applet.json","keywords":null,"cover":null,"text":"小程序注册、迁移小程序注册（企业）填写主体信息并选择验证方式支付验证需要用公司的对公账户向腾讯公司打款来验证主体身份，打款信息在提交主体信息后可以查看到。请根据页面提示，向指定的收款帐号汇入指定金额。 微信认证通过微信认证验证主体身份，需支付300元认证费。认证通过前，小程序部分...","link":"","photos":[],"count_time":{"symbolsCount":595,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"工作","slug":"工作","count":4,"path":"api/tags/工作.json"}],"author":{"name":"马麒麟","slug":"blog-author","avatar":"https://test-1257728582.cos.ap-chengdu.myqcloud.com/avter/IMG_3605.jpeg","link":"/","description":"习惯养成计划","socials":{"github":"https://github.com/mql870","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com","zhihu":"https://www.zhihu.com","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JavaScript-高级","uid":"5e2ed994fcc6085bef4fc36a901c80bc","slug":"JavaScript-senior","date":"2022-03-29T04:47:23.000Z","updated":"2022-03-29T05:13:46.743Z","comments":true,"path":"api/articles/JavaScript-senior.json","keywords":null,"cover":null,"text":"JS高级this面向对象语言中this表示当前对象的一个引用。 但在JavaScript中this不是固定不变的，它会随着执行环境的改变而改变。 在方法中，this表示该方法所属的对象var obj = &#123; firstName: \"Ma\", lastName: \"QiL...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"code","slug":"code","count":3,"path":"api/tags/code.json"}],"author":{"name":"马麒麟","slug":"blog-author","avatar":"https://test-1257728582.cos.ap-chengdu.myqcloud.com/avter/IMG_3605.jpeg","link":"/","description":"习惯养成计划","socials":{"github":"https://github.com/mql870","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com","zhihu":"https://www.zhihu.com","csdn":"","juejin":"","customs":{}}}}}